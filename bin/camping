#!/usr/bin/env ruby

require 'delegate'
require 'optparse'
require 'ostruct'

require 'stringio'
require 'rubygems'           
require 'camping'
require 'camping/server'
require 'yaml'

conf = OpenStruct.new(:host => '0.0.0.0', :port => 3301)

# Setup paths
if home = ENV['HOME'] # POSIX
  conf.db = File.join(home, '.camping.db')
  conf.rc = File.join(home, '.campingrc')
elsif home = ENV['APPDATA'] # MSWIN
  conf.db = File.join(home, 'Camping.db')
  conf.rc = File.join(home, 'Campingrc')
end

# Load configuration if any
if conf.rc and File.exists?( conf.rc )
  YAML.load_file(conf.rc).each do |k,v|
    conf.send("#{k}=", v)
  end 
end

# Parse options
opts = OptionParser.new do |opts|
    opts.banner = "Usage: camping app1.rb, app2.rb..."
    opts.define_head "#{File.basename($0)}, the microframework ON-button for ruby #{RUBY_VERSION} (#{RUBY_RELEASE_DATE}) [#{RUBY_PLATFORM}]"
    opts.separator ""
    opts.separator "Specific options:"

    opts.on("-h", "--host HOSTNAME", "Host for web server to bind to (default is all IPs)") { |conf.host| }
    opts.on("-p", "--port NUM", "Port for web server (defaults to #{conf.port})") { |conf.port| }
    opts.on("-d", "--database FILE", "Database file (defaults to #{conf.db})") { |conf.db| }
    opts.on("-l", "--log FILE", "Start a database log ('-' for STDOUT)") { |conf.log| }
    opts.on("-C", "--console", "Run in console mode with IRB") { conf.server = :console }
    opts.on("-s", "--server NAME", "Server to force (mongrel, webrick, console)") { |s| conf.server = s.to_sym }

    opts.separator ""
    opts.separator "Common options:"
  
    # No argument, shows at tail.  This will print an options summary.
    # Try it and see!
    opts.on_tail("-?", "--help", "Show this message") do
        puts opts
        exit
    end
  
    # Another typical switch to print the version.
    opts.on_tail("-v", "--version", "Show version") do
        class << Gem; attr_accessor :loaded_specs; end
        puts Gem.loaded_specs['camping'].version
        exit
    end
end

opts.parse! ARGV
if ARGV.length < 1
    puts opts
    exit
end

# get a copy of the paths to pass to the server
paths = ARGV.dup

# Check that mongrel exists 
if conf.server.nil? || conf.server == :mongrel
    begin
        require 'mongrel'
        require 'mongrel/camping'
        conf.server = :mongrel
    rescue LoadError 
        conf.server = :webrick 
    end
end

require "camping/server/#{conf.server}"

server = Camping::Server.const_get(conf.server.to_s.capitalize).new(conf, paths)
server.start
