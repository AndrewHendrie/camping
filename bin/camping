#!/usr/bin/env ruby

# this line prevents other db adapters from being loaded (oci8 was
# causing some pain.)
(RAILS_CONNECTION_ADAPTERS ||= []).replace %w[sqlite]

require 'delegate'
require 'stringio'
require 'rubygems'
require 'camping'

(puts <<USAGE; exit) if ARGV.length == 0
#{File.basename($0)}, the microframework ON-button for ruby #{RUBY_VERSION} (#{RUBY_RELEASE_DATE}) [#{RUBY_PLATFORM}]
Usage: #{File.basename($0)} your.camping.rb [your.camping.db] [host] [port]
    (host defaults to 0.0.0.0; port defaults to 3301)
USAGE

script, db = ARGV[0..-1]
host = ARGV[1] || '0.0.0.0'
port = (ARGV[2] || 3301).to_i

unless db
    homes = []
    homes << File.join( ENV['HOME'], '.camping.db' ) if ENV['HOME']
    homes << File.join( ENV['APPDATA'], 'Camping.db' ) if ENV['APPDATA']
    homes.each do |db|
        break if File.exists?( db )
    end
end

Camping::Models::Base.establish_connection :adapter => 'sqlite3', :database => db

class CampingReloader
    attr_accessor :klass, :mtime

    def initialize(script)
        @script = script
        load_app
    end

    def load_app
        @mtime = File.mtime(@script)
        title = File.basename(@script)[/^(\w+)/,1]
        begin
            load @script
        rescue Exception => e
            puts "!! trouble loading #{title}: [#{e.class}] #{e.message}"
            return
        end
        @klass = Object.const_get(Object.constants.grep(/^#{title}$/i)[0]) rescue nil
        @klass.create if @klass.respond_to? :create
        @klass
    end

    # Load the script, locate the module
    def reload_app 
        newtime = File.mtime( @script )
        return if @klass and @mtime and newtime <= @mtime

        k = @klass
        Object.instance_eval { remove_const k.name } if k
        load_app
    end

    def run(*a)
        reload_app
        if @klass
            @klass.run(*a) 
        else
            Camping.run(*a)
        end
    end
end

begin
    require 'mongrel'
    require 'mongrel/camping'
    config = Mongrel::Configurator.new :host => host do
        listener :port => port do
            uri "/", :handler => Mongrel::Camping::CampingHandler.new(CampingReloader.new(script))
            uri "/favicon.ico", :handler => Mongrel::Error404Handler.new("")
            trap("INT") { stop }
            run
        end
    end
    config.join
rescue LoadError
    require 'webrick/httpserver'
    require 'camping/webrick'

    # Mount the root
    s = WEBrick::HTTPServer.new(:BindAddress => host, :Port => port)
    s.mount "/", WEBrick::CampingHandler, CampingReloader.new(script)

    # Server up
    trap(:INT) do
        s.shutdown
    end
    s.start
end
